"""
Usage:
    mlwsearch.py (--find | -f) <mlw>
    mlwsearch.py (--download | -d) <mlw>
    mlwsearch.py (--write | -w) <path>
    mlwsearch.py (--output | -o) <n_results>
    mlwsearch.py (--help | -h)
    mlwsearch.py (--version | -v)

Options:
    -h --help     Open help menu
    -v --version  Show version

Required options:
    --find -f      find mlwr using md5, sha1, or an common signature name.
    --download -d  download selected sample
    --write -w     save the output results to path
    --output -o    show results with limited number
"""

import base64
import requests
from docopt import docopt, DocoptExit
from lxml import html as lh

BANNER = "IOKWiOKWiOKWiOKWhCDiloTilojilojilojilpMg4paE4paE4paEICAgICAgIOK"\
         "WiOKWiOKWkyAgICAg4paIICAgICDilojilpEg4paE4paE4paEICAgICAgIOKWiO"\
         "KWiOKWgOKWiOKWiOKWiCAg4paT4paI4paI4paI4paI4paIIA0K4paT4paI4paI4"\
         "paS4paA4paI4paAIOKWiOKWiOKWkuKWkuKWiOKWiOKWiOKWiOKWhCAgICDilpPi"\
         "lojilojilpIgICAg4paT4paI4paRIOKWiCDilpHilojilpHilpLilojilojiloj"\
         "ilojiloQgICAg4paT4paI4paIIOKWkiDilojilojilpLilpPiloggICDiloAgDQ"\
         "rilpPilojiloggICAg4paT4paI4paI4paR4paS4paI4paIICDiloDilojiloQgI"\
         "OKWkuKWiOKWiOKWkSAgICDilpLilojilpEg4paIIOKWkeKWiCDilpLilojilogg"\
         "IOKWgOKWiOKWhCAg4paT4paI4paIIOKWkeKWhOKWiCDilpLilpLilojilojilog"\
         "gICANCuKWkuKWiOKWiCAgICDilpLilojilogg4paR4paI4paI4paE4paE4paE4p"\
         "aE4paI4paIIOKWkuKWiOKWiOKWkSAgICDilpHilojilpEg4paIIOKWkeKWiCDil"\
         "pHilojilojiloTiloTiloTiloTilojilogg4paS4paI4paI4paA4paA4paI4paE"\
         "ICDilpLilpPiloggIOKWhCANCuKWkuKWiOKWiOKWkiAgIOKWkeKWiOKWiOKWkiD"\
         "ilpPiloggICDilpPilojilojilpLilpHilojilojilojilojilojilojilpLilp"\
         "HilpHilojilojilpLilojilojilpMgIOKWk+KWiCAgIOKWk+KWiOKWiOKWkuKWk"\
         "eKWiOKWiOKWkyDilpLilojilojilpLilpHilpLilojilojilojilojilpINCuKW"\
         "kSDilpLilpEgICDilpEgIOKWkSDilpLilpIgICDilpPilpLilojilpHilpEg4pa"\
         "S4paR4paTICDilpHilpEg4paT4paR4paSIOKWkiAgIOKWkuKWkiAgIOKWk+KWku"\
         "KWiOKWkeKWkSDilpLilpMg4paR4paS4paT4paR4paR4paRIOKWkuKWkSDilpENC"\
         "uKWkSAg4paRICAgICAg4paRICDilpIgICDilpLilpIg4paR4paRIOKWkSDilpIg"\
         "IOKWkSAg4paSIOKWkSDilpEgICAg4paSICAg4paS4paSIOKWkSAg4paR4paSIOK"\
         "WkSDilpLilpEg4paRIOKWkSAg4paRDQrilpEgICAgICDilpEgICAgIOKWkSAgIO"\
         "KWkiAgICAg4paRIOKWkSAgICAg4paRICAg4paRICAgIOKWkSAgIOKWkiAgICAg4"\
         "paR4paRICAg4paRICAgIOKWkSAgIA0KICAgICAgIOKWkSAgICAgICAgIOKWkSAg"\
         "4paRICAgIOKWkSAg4paRICAgIOKWkSAgICAgICAgICDilpEgIOKWkSAgIOKWkSA"\
         "gICAgICAg4paRICDilpENCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC"\
         "AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA="


class Mlwsearch():

    def __init__(self):
        self.banner()

    def banner(self):
        print(base64.b64decode(BANNER))
        print('\033[36m\t..s.earc.h..e.ng.in.e...vers.io.n..0.1\033[0m')
        print('\033[36m\t   github.com/MalwareReverseBrasil\033[0m')
        print('\033[36m\tTelegram: https://t.me/MalwareReverseBR\033[0m')

    def find(self):
        pass

    def download(self):
        pass


def main():
    arguments = docopt(__doc__, version='mwlr search 0.1')
    
    
    #mlws = Mlwsearch()
        


if __name__ == '__main__':
    main()


























#from bs4 import BeautifulSoup, SoupStrainer
#import urllib2
#import sys
#import time
#import argparse
#import re
#import requests
#
#
#parser = argparse.ArgumentParser(description='MalwareSearch 0.1\t[github.com/MalwareReverseBrasil/malwaresearch.git]',
#        epilog='Telegram: https://t.me/MalwareReverseBR')
#group = parser.add_mutually_exclusive_group()
#
#group.add_argument('-f', '--find', help='Enter your search via MD5, SHA1, SHA256 or an Common Signature name.', action='store', metavar= 'Sample')
#group.add_argument('-d', '--download', help='Download selected sample', action='store', metavar = 'Hash')
#
#parser.add_argument('-w', '--write', help='Save the output results.', action='store', metavar= 'File')
#parser.add_argument('-o', '--output', help='Show number of results', action='store', type = int, metavar= 'Int')
#
#args = parser.parse_args()
#
#if (args.write != None):
#    sys.stdout = open(args.write,'w')
#
#t1 = time.time()
#
#if args.find:
#    host = 'http://openmalware.org'
#    address = '/search.cgi?search='
#    malfind = args.find
#    site = host+address+malfind
#elif args.download:
#    host = 'http://openmalware.org'
#    address = '/search.cgi?search='
#    maldow = args.download
#    site = host+address+maldow
#
#
#def download(url):
#    print('Starting MalwareSearch ...')
#    try:
#        html = urllib2.urlopen(url).read()
#    except urllib2.URLError as e:
#        print ('Sorry, download error:', e.reason)
#        html = None
#    return html
#
#try:
#    url = download(site)
#    soup = BeautifulSoup(url,'lxml')
#except (KeyboardInterrupt,SystemExit):
#    print('Keyboard Interrupt')
#    sys.exit(0)
#
#if args.download:
#    try:
#        dow = soup(attrs={'href':re.compile('/download.cgi*')})[0]['href']
#        name_dow = soup(attrs={'id':'checksum'})[4].string.strip('\n')
#        print('\nStarting downloading of the malware %s.zip' %name_dow)
#        r = requests.get(host + dow)
#        with open(name_dow + '.zip', "wb") as code:
#            code.write(r.content)
#        print('\nDownload Successful - Original Filename: %s' %name_dow)
#    except:
#        print('Download failed!')
#        sys.exit(1)
#
#if args.find:
#    try:
#        founds = soup.find('h3').string
#    except:
#        print('Error: Search too short')
#        sys.exit(0)
#
#    if  (args.write != None):
#        print('\n\t\t' + founds + '\n')
#    else:
#        print('\033[1;31m\n\t\t' + founds + '\n\033[0m')
#
#    if (args.output != None):
#        if (args.output > 20):
#            outnumber = 20
#            print('Result(s) for %s Sample(s)\n' %args.output)
#        else:
#            outnumber = args.output
#            print('Result(s) for %s Sample(s)\n' %args.output)
#    else:
#        outnumber = 1
#        print('This is the first result!\n')
#
#    x = 0
#
#    for i in range(0,(5*(outnumber))):
#
#       try:
#            tr = soup(attrs={'id':'checksum'})[i]
#
#       except:
#            pass
#
#       valid = tr.text.strip('\n')
#
#       if (len(valid) == 64) and (valid.count(' ',0,len(valid)) == 0):
#            for j in range(-3,3):
#                try:
#                    tr = soup(attrs={'id':'checksum'})[i-j]
#                except:
#                    pass
#                area = tr.text.strip('\n')
#
#                if (j == 2):
#                    md5 = 'MD5:\t\t\t' + area
#                    print(md5)
#                    break
#
#                elif (j == 1):
#                    sha1 = 'SHA1:\t\t\t' + area
#                    print(sha1)
#
#                elif (j == 0):
#                    sha256 = 'SHA256:\t\t\t' + area
#                    print(sha256)
#
#                elif (j == -1):
#                    ocid = 'OCID:\t\t\t' + area
#                    print(ocid)
#
#                elif (j == -2):
#                    orifile = 'Original Filename:\t' + area
#
#                    if (args.write != None):
#                        print(orifile)
#                    else:
#                        print('\033[1;32m' + orifile + '\033[0m')
#                elif (j == -3):
#                        td1 = soup(text='Added:')[x].findNext('td').string.strip('\n')
#                        x += 1
#                        added = 'Added:\t\t\t' + td1
#                        print('\n'+added)
#t2 = time.time()
#total_time = t2-t1
#print('\n\nTotal search time %.2f seconds' %total_time)
